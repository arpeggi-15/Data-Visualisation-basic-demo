# -*- coding: utf-8 -*-
"""Age_height_ml_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PLRRJQz9fb41aoG31WnKqMbwhodQz3rO
"""

from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go



!wget "https://archive.org/download/ages-and-heights/AgesAndHeights.pkl"

data = pd.read_pickle('AgesAndHeights.pkl')
data

ages = data['Age']
heights = data['Height']
fig = px.scatter(x=ages, y=heights, title="Height vs Age", labels={'x': 'Age (Years)',
                                                                   'y': 'Height (Inches)'})
fig.show()

x = ages.to_numpy()
y = heights.to_numpy()

model = LinearRegression().fit(x.reshape((len(x), 1)), heights)

x_new = np.arange(18).reshape((18, 1))
preds  = model.predict(x_new)

fig = px.scatter(x=ages, y=heights, title="Height vs Age", labels={'x': 'Age (Years)',
                                                                   'y': 'Height (Inches)'})
fig.add_trace(
    go.Scatter(x=x_new.reshape(x_new.shape[0]), y=preds, mode='lines', name='Model'))

fig.show()

from joblib import dump, load
dump(model, 'model.joblib')

loaded_model = load('model.joblib')

more_preds  = loaded_model.predict(x_new)

!wget https://github.com/plotly/orca/releases/download/v1.2.1/orca-1.2.1-x86_64.AppImage -O /usr/local/bin/orca
!chmod +x /usr/local/bin/orca
!apt-get install xvfb libgtk2.0-0 libgconf-2-4

def make_picture(training_data_filename, new_input_arr, model, output_file='predictions_pic.svg'):
  # Plot training data with model
  data = pd.read_pickle('AgesAndHeights.pkl')
  x_new = np.arange(18).reshape((18, 1))
  preds  = model.predict(x_new)
  ages = data['Age']
  heights = data['Height']
  fig = px.scatter(x=ages, y=heights, title="Height vs Age", labels={'x': 'Age (Years)',
                                                                   'y': 'Height (Inches)'})
  fig.add_trace(
      go.Scatter(x=x_new.reshape(x_new.shape[0]), y=preds, mode='lines', name='Model'))

  if new_input_arr is not False:
    # Plot new predictions
    new_preds = model.predict(new_input_arr)
    fig.add_trace(
      go.Scatter(x=new_input_arr.reshape(new_input_arr.shape[0]), y=new_preds, name='New Outputs', mode='markers', marker=dict(
            color='purple',
            size=20,
            line=dict(
                color='purple',
                width=2
            ))))
  fig.write_image(output_file, width=800)
  return fig

def floats_string_to_input_arr(floats_str):
  floats = [float(x.strip()) for x in floats_str.split(',')]
  as_np_arr = np.array(floats).reshape(len(floats), 1)
  return as_np_arr


make_picture('AgesAndHeights.pkl', False, loaded_model, 'base_pic.svg')